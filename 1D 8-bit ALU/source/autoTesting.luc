module autoTesting (
    input clk,  // clock
    input rst,  // reset
    input start,
    output out[8],
    output error
  ) {
  
  sig resetter;
  sig shiftconst[8];
  alu8 alu;
  fsm testState (.clk(clk)) = {IDLE, ADD, SUB, AND, OR, XOR, A, SHL, SHR, SRA, CMPEQ, CMPLT, CMPLE, ERROR, DONE};
  dff num[25] (.clk(clk), .rst(resetter));

  always {
  
    alu.a = num.q[15:8];
    alu.b = num.q[23:16];
    alu.alufn = 0;
    shiftconst = 0;
    
    //setting output
    case (testState.q) {
      testState.IDLE:
          out = 11111111;
        
      testState.ADD:
          alu.alufn = 000000;
      
      testState.SUB:
          alu.alufn = 000001;
        
      testState.AND:
          alu.alufn = 011000;
        
      testState.OR:
          alu.alufn = 011110;
        
      testState.XOR:
          alu.alufn = 010110;
        
      testState.A:
          alu.alufn = 011010;
        
      testState.SHL:
          alu.alufn = 100000;
        
      testState.SHR:
          alu.alufn = 100001;
        
      testState.SRA:
          alu.alufn = 100011;
        
      testState.CMPEQ:
          alu.alufn = 110011;
        
      testState.CMPLT:
          alu.alufn = 110101;
        
      testState.CMPLE:
          alu.alufn = 110111;
        
      testState.DONE:
          out = 77;
  
    }
    
    //changing state
    case (testState.q) {
      testState.IDLE:
          if (start) {
        resetter = 1;
        testState.d = testState.ADD;
        }
        
      testState.ADD:
          if (alu.out != num.q[15:8] + num.q[23:16]) {
              testState.d = testState.ERROR;
          } else if (num.q == 1000000000000000000000000) {
              testState.d = testState.SUB;
        }
        
      
      testState.SUB:
          if (alu.out != num.q[15:8] - num.q[23:16]) {
              testState.d = testState.ERROR;
          } else if (num.q == 1000000000000000000000000) {
              testState.d = testState.AND;
        }
        
      testState.AND:
          if (alu.out != num.q[15:8] & num.q[23:16]) {
              testState.d = testState.ERROR;
          } else if (num.q == 1000000000000000000000000) {
              testState.d = testState.OR;
        }
        
      testState.OR:
          if (alu.out != num.q[15:8] | num.q[23:16]) {
              testState.d = testState.ERROR;
          } else if (num.q == 1000000000000000000000000) {
              testState.d = testState.XOR;
        }
        
      testState.XOR:
          if (alu.out != num.q[15:8] ^ num.q[23:16]) {
              testState.d = testState.ERROR;
          } else if (num.q == 1000000000000000000000000) {
              testState.d = testState.A;
        }
        
      testState.A:
          if (alu.out != num.q[15:8] ) {
              testState.d = testState.ERROR;
          } else if (num.q == 1000000000000000000000000) {
              testState.d = testState.SHL;
        }
        
      testState.SHL:

          if (alu.out != num.q[15:8]*(num.q[16] + 2*num.q[17] + 4*num.q[18])) {
            testState.d = testState.ERROR;
        } else if (num.q == 1000000000000000000000000) {
              testState.d = testState.SHR;
        }
        
        
      testState.SHR:
          if (alu.out != num.q[15:8]/(num.q[16] + 2*num.q[17] + 4*num.q[18])) {
            testState.d = testState.ERROR;
        } else if (num.q == 1000000000000000000000000) {
              testState.d = testState.SRA;
        }
        
      testState.SRA:
          case(num.q[16:14]) {
            000:
              shiftconst = num.q[15:8];
            
            001:
              shiftconst[7] = num.q[15];
              shiftconst[6:0] = num.q[15:9];
            
            010:
              shiftconst[7:6] = 2x{num.q[15]};
              shiftconst[5:0] = num.q[15:10];
            
            011:
              shiftconst[7:5] = 3x{num.q[15]};
              shiftconst[4:0] = num.q[15:11];
            
            100:
              shiftconst[7:4] = 4x{num.q[15]};
              shiftconst[3:0] = num.q[15:12];
            
            101:
              shiftconst[7:3] = 5x{num.q[15]};
              shiftconst[2:0] = num.q[15:13];
            
            110:
              shiftconst[7:2] = 6x{num.q[15]};
              shiftconst[1:0] = num.q[15:14];
            
            111:
              shiftconst[7:1] = 7x{num.q[15]};
              shiftconst[0] = num.q[15];
            
          }
        
          
          if (alu.out != shiftconst) {
            testState.d = testState.ERROR;
        } else if (num.q == 1000000000000000000000000) {
              testState.d = testState.SRA;
        }
        
      testState.CMPEQ:
          if (!(alu.out & (num.q[15:8] == num.q[23:16]))) {
              testState.d = testState.ERROR;
          } else if (num.q == 1000000000000000000000000) {
              testState.d = testState.CMPLT;
        }
        
      testState.CMPLT:
          if (!(alu.out & (num.q[15:8] < num.q[23:16]))) {
              testState.d = testState.ERROR;
          } else if (num.q == 1000000000000000000000000) {
              testState.d = testState.CMPLE;
        }
        
      testState.CMPLE:
          if (!(alu.out & (num.q[15:8] <= num.q[23:16]))) {
              testState.d = testState.ERROR;
          } else if (num.q == 1000000000000000000000000) {
              testState.d = testState.DONE;
        }
        
      testState.ERROR:
          if (rst) {
        testState.d = testState.IDLE;
        }
        
      testState.DONE:
      if (start == 0) {
        testState.d = testState.IDLE;
        }
        
        
      
  
    }
      
    
    
    
    if (testState.q != testState.IDLE) {
      num.d = num.q + 1;
    }
    
    if (testState.q == testState.ERROR) {
      out = num.q;
      error = 1;
    } else {
      error = 0;
      out = alu.out;
    }
    
    
 }
}